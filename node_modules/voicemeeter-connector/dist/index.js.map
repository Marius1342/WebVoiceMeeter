{"version":3,"file":"index.js","sources":["../src/lib/VoicemeeterConnector.ts","../src/lib/VoicemeeterConsts.ts","../src/lib/DLLHandler.ts","../src/index.ts"],"sourcesContent":["/* eslint-disable no-control-regex */\r\nimport ffi from \"ffi-napi\";\r\nimport refArray from \"ref-array-napi\";\r\nimport DLLHandler from \"./DLLHandler\";\r\nimport { Device, VMLibrary, VoiceMeeterTypes } from \"../types/VoicemeeterTypes\";\r\nimport { BusProperties, StripProperties } from \"./VoicemeeterConsts\";\r\n/**\r\n * @ignore\r\n */\r\nconst CharArray = refArray(\"char\");\r\n/**\r\n * @ignore\r\n */\r\nconst LongArray = refArray(\"long\");\r\n/**\r\n * @ignore\r\n */\r\nconst FloatArray = refArray(\"float\");\r\n/**\r\n * @ignore\r\n */\r\nlet libVM: VMLibrary;\r\n/**\r\n * @ignore\r\n */\r\nlet instance: Voicemeeter;\r\n\r\nexport default class Voicemeeter {\r\n\t/**\r\n\t * Initializes the voice meeter dll connection.\r\n\t * This call is neccessary to use the api. It returns a promise with a VoiceMeeter instance\r\n\t */\r\n\tpublic static async init(): Promise<Voicemeeter> {\r\n\t\tconst dllPath = await DLLHandler.getDLLPath();\r\n\r\n\t\treturn new Promise((resolve: (instance: Voicemeeter) => any) => {\r\n\t\t\tif (!instance) {\r\n\t\t\t\tinstance = new Voicemeeter();\r\n\t\t\t}\r\n\t\t\tlibVM = ffi.Library(`${dllPath}/VoicemeeterRemote64.dll`, {\r\n\t\t\t\tVBVMR_Login: [\"long\", []],\r\n\t\t\t\tVBVMR_Logout: [\"long\", []],\r\n\t\t\t\tVBVMR_RunVoicemeeter: [\"long\", [\"long\"]],\r\n\t\t\t\tVBVMR_IsParametersDirty: [\"long\", []],\r\n\t\t\t\tVBVMR_GetLevel: [\"long\", [\"long\", \"long\", FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterFloat: [\"long\", [CharArray, FloatArray]],\r\n\t\t\t\tVBVMR_GetParameterStringA: [\"long\", [CharArray, CharArray]],\r\n\t\t\t\tVBVMR_SetParameters: [\"long\", [CharArray]],\r\n\t\t\t\tVBVMR_Output_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Output_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_Input_GetDeviceNumber: [\"long\", []],\r\n\t\t\t\tVBVMR_Input_GetDeviceDescA: [\"long\", [\"long\", LongArray, CharArray, CharArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterType: [\"long\", [LongArray]],\r\n\t\t\t\tVBVMR_GetVoicemeeterVersion: [\"long\", [LongArray]],\r\n\t\t\t});\r\n\t\t\tinstance.isInitialised = true;\r\n\t\t\tresolve(instance);\r\n\t\t});\r\n\t}\r\n\r\n\tprivate isInitialised = false;\r\n\tprivate isConnected = false;\r\n\tprivate outputDevices: Device[] = [];\r\n\tprivate inputDevices: Device[] = [];\r\n\tprivate version = \"\";\r\n\tprivate type: VoiceMeeterTypes;\r\n\tprivate eventPool = [] as Array<() => void>;\r\n\tprivate stringParameters = [\"Label\", \"FadeTo\", \"FadeBy\", \"AppGain\", \"AppMute\", \"name\", \"ip\"];\r\n\r\n\t/**\r\n\t * Starts a connection to VoiceMeeter\r\n\t */\r\n\tpublic connect = () => {\r\n\t\tif (!this.isInitialised) {\r\n\t\t\tthrow new Error(\"Await the initialisation before connect\");\r\n\t\t}\r\n\t\tif (this.isConnected) {\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tif (libVM.VBVMR_Login() === 0) {\r\n\t\t\tthis.isConnected = true;\r\n\t\t\tthis.type = this.getVoicemeeterType();\r\n\t\t\tthis.version = this.getVoicemeeterVersion();\r\n\t\t\tsetInterval(this.checkPropertyChange, 10);\r\n\t\t\treturn;\r\n\t\t}\r\n\t\tthis.isConnected = false;\r\n\t\tthrow new Error(\"Connection failed\");\r\n\t};\r\n\r\n\t/**\r\n\t * Getter $outputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $outputDevices(): Device[] {\r\n\t\treturn this.outputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $inputDevices\r\n\t * @return {Device[] }\r\n\t */\r\n\tpublic get $inputDevices(): Device[] {\r\n\t\treturn this.inputDevices;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $version\r\n\t * @return {string }\r\n\t */\r\n\tpublic get $version(): string {\r\n\t\treturn this.version;\r\n\t}\r\n\r\n\t/**\r\n\t * Getter $type\r\n\t * @return {VoiceMeeterTypes}\r\n\t */\r\n\tpublic get $type(): VoiceMeeterTypes {\r\n\t\treturn this.type;\r\n\t}\r\n\r\n\t/**\r\n\t * Terminates the connection to VoiceMeeter\r\n\t */\r\n\tpublic disconnect = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\ttry {\r\n\t\t\tif (libVM.VBVMR_Logout() === 0) {\r\n\t\t\t\tthis.isConnected = false;\r\n\t\t\t\treturn;\r\n\t\t\t}\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t} catch {\r\n\t\t\tthrow new Error(\"Disconnect failed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Updates all input and ouput devices\r\n\t */\r\n\tpublic updateDeviceList = () => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tthis.outputDevices = [];\r\n\t\tthis.inputDevices = [];\r\n\t\tconst outputDeviceNumber = libVM.VBVMR_Output_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < outputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Output_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.outputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\r\n\t\tconst inputDeviceNumber = libVM.VBVMR_Input_GetDeviceNumber();\r\n\t\tfor (let i = 0; i < inputDeviceNumber; i++) {\r\n\t\t\tconst hardwareIdPtr = new CharArray(256) as any;\r\n\t\t\tconst namePtr = new CharArray(256) as any;\r\n\t\t\tconst typePtr = new LongArray(1) as any;\r\n\r\n\t\t\tlibVM.VBVMR_Input_GetDeviceDescA(i, typePtr, namePtr, hardwareIdPtr);\r\n\t\t\tthis.inputDevices.push({\r\n\t\t\t\tname: String.fromCharCode(...namePtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\thardwareId: String.fromCharCode(...hardwareIdPtr.toArray()).replace(/\\u0000+$/g, \"\"),\r\n\t\t\t\ttype: typePtr[0],\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns wheter a parameter has been changed\r\n\t */\r\n\tpublic isParametersDirty = () => {\r\n\t\treturn libVM.VBVMR_IsParametersDirty();\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a bus parameter.\r\n\t * @param  {number} index Index of the bus\r\n\t * @param  {BusProperties} property Property which should be get\r\n\t */\r\n\r\n\tpublic getBusParameter = (index: number, property: BusProperties) => {\r\n\t\treturn this.getParameter(\"Bus\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a strip parameter\r\n\t * @param  {number} index Index of the strip\r\n\t * @param  {StripProperties} property Property which should be get\r\n\t */\r\n\tpublic getStripParameter = (index: number, property: StripProperties) => {\r\n\t\treturn this.getParameter(\"Strip\", index, property);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a strip.\r\n\t * @param  {number} index Strip number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setStripParameter = (index: number, property: StripProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Strip\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus.\r\n\t * @param  {number} index Bus number\r\n\t * @param  {StripProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tpublic setBusParameter = (index: number, property: BusProperties, value: any) => {\r\n\t\treturn this.setParameter(\"Bus\", index, property, value);\r\n\t};\r\n\r\n\t/**\r\n\t * @param  {()=>any} fn Function which should be called if something changes\r\n\t */\r\n\tpublic attachChangeEvent = (fn: () => any) => {\r\n\t\tthis.eventPool.push(fn);\r\n\t};\r\n\t/**\r\n\t * @param parameterName Name of the parameter that should be get\r\n\t * @returns {any} Parameter value\r\n\t */\r\n\tpublic getOption = (parameterName: string) => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not correct connected \");\r\n\t\t}\r\n\t\tconst hardwareIdPtr = Buffer.alloc(parameterName.length + 1);\r\n\t\thardwareIdPtr.write(parameterName);\r\n\t\tlet namePtr = null;\r\n\t\t// Some parameters return string values and require some post-processing, this checks for those parameters\r\n\t\tif (this.stringParameters.some((str) => parameterName.includes(str))) {\r\n\t\t\tnamePtr = new CharArray(512);\r\n\t\t\tlibVM.VBVMR_GetParameterStringA(hardwareIdPtr, namePtr);\r\n\t\t\treturn String.fromCharCode\r\n\t\t\t\t.apply(null, namePtr)\r\n\t\t\t\t.split(\"\")\r\n\t\t\t\t.filter((e: string) => {\r\n\t\t\t\t\treturn e !== \"\\0\";\r\n\t\t\t\t})\r\n\t\t\t\t.join(\"\");\r\n\t\t}\r\n\t\tnamePtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetParameterFloat(hardwareIdPtr, namePtr);\r\n\t\treturn namePtr[0];\r\n\t};\r\n\t/**\r\n\t * Sets an option.\r\n\t * @param {string} option Option to set\r\n\t */\r\n\tpublic setOption = (option: string) => {\r\n\t\tconst script = Buffer.alloc(option.length + 1);\r\n\t\tscript.fill(0).write(option);\r\n\t\tlibVM.VBVMR_SetParameters(script);\r\n\t\treturn new Promise((resolve) => setTimeout(resolve, 200));\r\n\t};\r\n\r\n\t/**\r\n\t * Checks whether properties has been changed and calls all event listeners\r\n\t */\r\n\tprivate checkPropertyChange = () => {\r\n\t\tif (this.isParametersDirty() === 1) {\r\n\t\t\tthis.eventPool.forEach((eventListener) => {\r\n\t\t\t\teventListener();\r\n\t\t\t});\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Gets installed voicemeeter type.\r\n\t * Means Voicemeeter(normal,banana,potato)\r\n\t */\r\n\tprivate getVoicemeeterType = (): VoiceMeeterTypes => {\r\n\t\tconst typePtr = new LongArray(1);\r\n\t\tif (libVM.VBVMR_GetVoicemeeterType(typePtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\tswitch (typePtr[0]) {\r\n\t\t\tcase 1: // Voicemeeter\r\n\t\t\t\treturn \"voicemeeter\";\r\n\t\t\tcase 2: // Voicemeeter Banana\r\n\t\t\t\treturn \"voicemeeterBanana\";\r\n\t\t\tcase 3: // Voicemeeter Potato\r\n\t\t\t\treturn \"voicemeeterPotato\";\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new Error(\"Voicemeeter seems not to be installed\");\r\n\t\t}\r\n\t};\r\n\r\n\t/**\r\n\t * Returns the installed voicemeeter version\r\n\t */\r\n\tprivate getVoicemeeterVersion = () => {\r\n\t\tconst versionPtr = new LongArray(1) as any;\r\n\t\tif (libVM.VBVMR_GetVoicemeeterVersion(versionPtr) !== 0) {\r\n\t\t\tthrow new Error(\"running failed\");\r\n\t\t}\r\n\t\treturn versionPtr;\r\n\t};\r\n\r\n\t/**\r\n\t * Gets a parameter of voicemeeter\r\n\t * @param  {'Strip'|'Bus'} selector Strip or Bus\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Property which should be read\r\n\t */\r\n\tprivate getParameter = (selector: \"Strip\" | \"Bus\", index: number, property: StripProperties | BusProperties) => {\r\n\t\tconst parameterName = `${selector}[${index}].${property}`;\r\n\t\treturn this.getOption(parameterName);\r\n\t};\r\n\r\n\t/**\r\n\t * Sets a parameter of a bus or Strip\r\n\t * @param  {'Strip'|'Bus'} selector\r\n\t * @param  {number} index Number of strip or bus\r\n\t * @param  {StripProperties|BusProperties} property Propertyname which should be changed\r\n\t * @param  {any} value Property value\r\n\t */\r\n\tprivate setParameter = (\r\n\t\tselector: \"Strip\" | \"Bus\",\r\n\t\tindex: number,\r\n\t\tproperty: StripProperties | BusProperties,\r\n\t\tvalue: any\r\n\t): Promise<any> => {\r\n\t\tif (!this.isConnected) {\r\n\t\t\tthrow new Error(\"Not connected \");\r\n\t\t}\r\n\t\tconst scriptString = `${selector}[${index}].${property}=${value};`;\r\n\t\treturn this.setOption(scriptString);\r\n\t};\r\n\t/**\r\n\t * Gets realtime audio level see the VoicemeeterRemote API: [VoicemeeterRemote.h GetLevel](https://github.com/mirror/equalizerapo/blob/7aece1b788fce5aa11873f3842a0d01f7c78454b/VoicemeeterClient/VoicemeeterRemote.h#L284),\r\n\t * for more details about the parameters\r\n\t * @param {0|1|2|3} type 0 = pre fader input levels. 1 = post fader input levels. 2= post Mute input levels. 3= output levels\r\n\t * @param channel audio channel zero based index\r\n\t * @returns {float} Current audio level\r\n\t */\r\n\tpublic getLevel = (type: 0 | 1 | 2 | 3, channel: number) => {\r\n\t\tconst levelPtr = new FloatArray(1);\r\n\t\tlibVM.VBVMR_GetLevel(type, channel, levelPtr);\r\n\t\treturn levelPtr[0];\r\n\t};\r\n}\r\n","export const InterfaceTypes = {\r\n\tstrip: 0,\r\n\tbus: 1,\r\n};\r\n\r\nexport enum StripProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tSolo = \"Solo\",\r\n\tMC = \"MC\",\r\n\tGain = \"Gain\",\r\n\tPan_x = \"Pan_x\",\r\n\tPan_y = \"Pan_y\",\r\n\tColor_x = \"Color_x\",\r\n\tColor_y = \"Color_y\",\r\n\tfx_x = \"fx_x\",\r\n\tfx_y = \"fx_y\",\r\n\tAudibility = \"Audibility\",\r\n\tComp = \"Comp\",\r\n\tGate = \"Gate\",\r\n\tEqGain1 = \"EqGain1\",\r\n\tEqGain2 = \"EqGain2\",\r\n\tEqGain3 = \"EqGain3\",\r\n\tLabel = \"Label\",\r\n\tA1 = \"A1\",\r\n\tA2 = \"A2\",\r\n\tA3 = \"A3\",\r\n\tA4 = \"A4\",\r\n\tA5 = \"A5\",\r\n\tB1 = \"B1\",\r\n\tB2 = \"B2\",\r\n\tB3 = \"B3\",\r\n\tFadeTo = \"FadeTo\",\r\n}\r\nexport enum BusProperties {\r\n\tMono = \"Mono\",\r\n\tMute = \"Mute\",\r\n\tEQ = \"EQ.on\",\r\n\tGain = \"Gain\",\r\n\tNormalMode = \"mode.normal\",\r\n\tAmixMode = \"mode.Amix\",\r\n\tBmixMode = \"mode.Bmix\",\r\n\tRepeatMode = \"mode.Repeat\",\r\n\tCompositeMode = \"mode.Composite\",\r\n\tFadeTo = \"FadeTo\",\r\n\tLabel = \"Label\",\r\n}\r\n","import Registry from \"winreg\";\r\n\r\nconst DLLHandler = {\r\n\tgetDLLPath: async (): Promise<any> => {\r\n\t\tconst regKey = new Registry({\r\n\t\t\thive: Registry.HKLM,\r\n\t\t\tkey: \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Uninstall\\\\VB:Voicemeeter {17359A74-1236-5467}\",\r\n\t\t});\r\n\t\treturn new Promise((resolve) => {\r\n\t\t\tregKey.values((err: any, items: any) => {\r\n\t\t\t\tif (err) {\r\n\t\t\t\t\tthrow new Error(err);\r\n\t\t\t\t}\r\n\t\t\t\tconst unistallerPath = items.find((i: any) => i.name === \"UninstallString\").value;\r\n\t\t\t\tconst fileNameIndex = unistallerPath.lastIndexOf(\"\\\\\");\r\n\t\t\t\tresolve(unistallerPath.slice(0, fileNameIndex));\r\n\t\t\t});\r\n\t\t});\r\n\t},\r\n};\r\n\r\nexport default DLLHandler;\r\n","import Voicemeeter from \"./lib/VoicemeeterConnector\";\r\nimport * as constants from \"./lib/VoicemeeterConsts\";\r\nimport * as types from \"./types/VoicemeeterTypes\";\r\n\r\nconst { BusProperties, InterfaceTypes, StripProperties } = constants;\r\n\r\nexport { Voicemeeter, BusProperties, InterfaceTypes, StripProperties, types };\r\n"],"names":["libVM","instance","StripProperties","BusProperties","CharArray","refArray","LongArray","FloatArray","Voicemeeter","_this","isInitialised","isConnected","outputDevices","inputDevices","version","type","eventPool","stringParameters","connect","Error","VBVMR_Login","getVoicemeeterType","getVoicemeeterVersion","setInterval","checkPropertyChange","disconnect","VBVMR_Logout","_unused","updateDeviceList","outputDeviceNumber","VBVMR_Output_GetDeviceNumber","i","hardwareIdPtr","namePtr","typePtr","VBVMR_Output_GetDeviceDescA","push","name","String","fromCharCode","apply","toArray","replace","hardwareId","inputDeviceNumber","VBVMR_Input_GetDeviceNumber","VBVMR_Input_GetDeviceDescA","isParametersDirty","VBVMR_IsParametersDirty","getBusParameter","index","property","getParameter","getStripParameter","setStripParameter","value","setParameter","setBusParameter","attachChangeEvent","fn","getOption","parameterName","Buffer","alloc","length","write","some","str","includes","VBVMR_GetParameterStringA","split","filter","e","join","VBVMR_GetParameterFloat","setOption","option","script","fill","VBVMR_SetParameters","Promise","resolve","setTimeout","forEach","eventListener","VBVMR_GetVoicemeeterType","versionPtr","VBVMR_GetVoicemeeterVersion","selector","getLevel","channel","levelPtr","VBVMR_GetLevel","init","regKey","Registry","hive","HKLM","key","values","err","items","unistallerPath","find","fileNameIndex","lastIndexOf","slice","reject","DLLHandler","then","dllPath","ffi","Library","VBVMR_RunVoicemeeter","get","constants","strip","bus"],"mappings":"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"}